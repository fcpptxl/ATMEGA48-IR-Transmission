Interrupt Vectors
    00000 C0F3      RJMP	__start|__text_start

Program Code (text area)
__start|__text_start:
    000F4 EFCF      LDI	R28,0xFF
    000F5 E0D2      LDI	R29,2
    000F6 BFCD      OUT	0x3D,R28
    000F7 BFDE      OUT	0x3E,R29
    000F8 51CE      SUBI	R28,0x1E
    000F9 40D0      SBCI	R29,0
    000FA EA0A      LDI	R16,0xAA
    000FB 8308      ST	Y,R16
    000FC 2400      CLR	R0
    000FD EBE4      LDI	R30,0xB4
    000FE E0F2      LDI	R31,2
    000FF E012      LDI	R17,2
    00100 3BE9      CPI	R30,0xB9
    00101 07F1      CPC	R31,R17
    00102 F011      BEQ	0x0105
    00103 9201      ST	Z+,R0
    00104 CFFB      RJMP	0x0100
    00105 8300      ST	Z,R16
    00106 E3E4      LDI	R30,0x34
    00107 E0F0      LDI	R31,0
    00108 E0A0      LDI	R26,0
    00109 E0B1      LDI	R27,1
    0010A E011      LDI	R17,1
    0010B E000      LDI	R16,0
    0010C BF0B      OUT	0x3B,R16
    0010D 3EE8      CPI	R30,0xE8
    0010E 07F1      CPC	R31,R17
    0010F F021      BEQ	0x0114
    00110 95C8      LPM
    00111 9631      ADIW	R30,1
    00112 920D      ST	X+,R0
    00113 CFF9      RJMP	0x010D
    00114 D097      RCALL	_main
_exit:
    00115 CFFF      RJMP	_exit
FILE: C:\Users\zteng\OneDrive\文档\电子线路设计\1接收板程序\smg_run.c
(0001) #include <iom48v.h>
(0002) #include <macros.h>
(0003) temp_value[]={
(0004) 0	,
(0005) 2	,
(0006) 4	,
(0007) 6	,
(0008) 8	,
(0009) 10	,
(0010) 12	,
(0011) 14	,
(0012) 16	,
(0013) 18	,
(0014) 20	,
(0015) 22	,
(0016) 24	,
(0017) 26	,
(0018) 28	,
(0019) 30	,
(0020) 32	,
(0021) 34	,
(0022) 36	,
(0023) 38	,
(0024) 40	,
(0025) 42	,
(0026) 44	,
(0027) 46	,
(0028) 48	,
(0029) 50	,
(0030) 52	,
(0031) 54	,
(0032) 56	,
(0033) 58	,
(0034) 60	,
(0035) 62	,
(0036) 64	,
(0037) 66	,
(0038) 68	,
(0039) 70	,
(0040) 72	,
(0041) 74	,
(0042) 76	,
(0043) 78	,
(0044) 80	,
(0045) 82	,
(0046) 84	,
(0047) 86	,
(0048) 88	,
(0049) 90	,
(0050) 92	,
(0051) 94	,
(0052) 96	,
(0053) 98	,
(0054) 100	,
(0055) 102	,
(0056) 104	,
(0057) 106	,
(0058) 108	,
(0059) 110	,
(0060) 112	,
(0061) 114	,
(0062) 116	,
(0063) 118	,
(0064) 120	,
(0065) 122	,
(0066) 124	,
(0067) 126	,
(0068) 128	,
(0069) 130	,
(0070) 132	,
(0071) 134	,
(0072) 136	,
(0073) 138	,
(0074) 140	,
(0075) 142	,
(0076) 144	,
(0077) 146	,
(0078) 148	,
(0079) 150	,
(0080) 152	,
(0081) 154	,
(0082) 156	,
(0083) 158	,
(0084) 160	,
(0085) 162	,
(0086) 164	,
(0087) 166	,
(0088) 168	,
(0089) 170	,
(0090) 172	,
(0091) 174	,
(0092) 176	,
(0093) 178	,
(0094) 180	,
(0095) 182	,
(0096) 184	,
(0097) 186	,
(0098) 188	,
(0099) 190	,
(0100) 192	,
(0101) 194	,
(0102) 196	,
(0103) 198	,
(0104) 200	,
(0105) 202	,
(0106) 204	,
(0107) 206	,
(0108) 208	,
(0109) 210	,
(0110) 212	,
(0111) 214	,
(0112) 216	,
(0113) 218	,
(0114) 220	,
(0115) 222	,
(0116) 224	,
(0117) 226	,
(0118) 228	,
(0119) 230	,
(0120) 232	,
(0121) 234	,
(0122) 236	,
(0123) 238	,
(0124) 240	,
(0125) 242	,
(0126) 244	,
(0127) 246	,
(0128) 248	,
(0129) 250	,
(0130) 252	,
(0131) 254	,
(0132) 256	,
(0133) 258	,
(0134) 260	,
(0135) 262	,
(0136) 264	,
(0137) 266	,
(0138) 268	,
(0139) 270	,
(0140) 272	,
(0141) 274	,
(0142) 276	,
(0143) 278	,
(0144) 280	,
(0145) 282	,
(0146) 284	,
(0147) 286	,
(0148) 288	,
(0149) 290	,
(0150) 292	,
(0151) 294	,
(0152) 296	,
(0153) 298	,
(0154) 300	,
(0155) 302	,
(0156) 304	,
(0157) 306	,
(0158) 308	,
(0159) 310	,
(0160) 312	,
(0161) 314	,
(0162) 316	,
(0163) 318	,
(0164) 320	,
(0165) 322	,
(0166) 324	,
(0167) 326	,
(0168) 328	,
(0169) 330	,
(0170) 332	,
(0171) 334	,
(0172) 336	,
(0173) 338	,
(0174) 340	,
(0175) 342	,
(0176) 344	,
(0177) 346	,
(0178) 348	,
(0179) 350	,
(0180) 352	,
(0181) 354	,
(0182) 356	,
(0183) 358	,
(0184) 360	,
(0185) 362	,
(0186) 364	,
(0187) 366	,
(0188) 368	,
(0189) 370	,
(0190) 372	,
(0191) 374	,
(0192) 376	,
(0193) 378	,
(0194) 380	,
(0195) 382	,
(0196) 384	,
(0197) 386	,
(0198) 388	,
(0199) 390	,
(0200) 392	,
(0201) 394	,
(0202) 396	,
(0203) 398	,
(0204) 400	
(0205) };
(0206) /***********宏定义*************/
(0207) #define  uchar unsigned char 
(0208) #define  uint unsigned int
(0209)                  
(0210) table[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71};
(0211) 
(0212) 
(0213) /***************************************************
(0214) 宏定义名称：IO端口操作宏定义。
(0215) 功      能：实现数码管的位选。
(0216) ***************************************************/
(0217) #define SET_WEI1 PORTC|=~BIT(5)   
(0218) #define SET_WEI2 PORTC|=~BIT(4)
(0219) #define SET_WEI3 PORTC|=~BIT(2)
(0220) 
(0221) #define CLR_WEI1 PORTC&=~BIT(5)
(0222) #define CLR_WEI2 PORTC&=BIT(4)
(0223) #define CLR_WEI3 PORTC&=BIT(2)
(0224) #define CLR_ALL  PORTC&=0XC9
(0225) /*#define SET_WEI1 PORTC&=~BIT(1)   
(0226) #define SET_WEI2 PORTC&=~BIT(2)
(0227) #define SET_WEI3 PORTC&=~BIT(4)
(0228) #define SET_WEI4 PORTC&=~BIT(5)
(0229) 
(0230) #define CLR_WEI1 PORTC|=~BIT(1)
(0231) #define CLR_WEI2 PORTC|=BIT(2)
(0232) #define CLR_WEI3 PORTC|=BIT(4)
(0233) #define CLR_WEI4 PORTC|=BIT(5)
(0234) #define CLR_ALL  PORTC|=0X34*/
(0235) unsigned char  falg1;
(0236) uchar code_value=0;
(0237) uchar key_code[4],code='_';
(0238) //******************红外引脚************************************                          
(0239) #define hongwai_bit   PD6
(0240) #define hongwai_in    DDRD&=~BIT(hongwai_bit)
(0241) #define RED_R  (PIND & BIT(hongwai_bit))
(0242) /*******************************************
(0243) 函数名称: IO口初始化程序
(0244) 功    能: 实现IO初始化
(0245) 参    数: 无
(0246) 返 回 值: 无
(0247) /********************************************/
(0248) void port_init(void)
(0249) {
(0250)  PORTC = 0x00;
_port_init:
    00116 2422      CLR	R2
    00117 B828      OUT	0x08,R2
(0251)  DDRC  = 0x3F;
    00118 E38F      LDI	R24,0x3F
    00119 B987      OUT	0x07,R24
(0252)  PORTB = 0xFF;
    0011A EF8F      LDI	R24,0xFF
    0011B B985      OUT	0x05,R24
(0253)  DDRB  = 0xFF;
    0011C B984      OUT	0x04,R24
(0254)  DDRD=0xFF;
    0011D B98A      OUT	0x0A,R24
(0255)  hongwai_in;//设置PD2（INT0）为输入
    0011E 9856      CBI	0x0A,6
(0256)  PORTD&=~BIT(hongwai_bit);//带上拉电阻
    0011F 985E      CBI	0x0B,6
    00120 9508      RET
_Delay_ms:
  i                    --> R20
  j                    --> R22
  ms                   --> R16
    00121 D147      RCALL	push_xgsetF000
(0257) }
(0258) 
(0259) /*******************************************
(0260) 函数名称: 软件延时函数
(0261) 功    能: 实现软件延时
(0262) 参    数: ms--延时的毫秒数
(0263) 返 回 值: 无
(0264) /********************************************/
(0265) void Delay_ms(uint ms)
(0266) {
(0267)    unsigned int i,j;
(0268)    for(i=0;i<ms;i++)
    00122 2744      CLR	R20
    00123 2755      CLR	R21
    00124 C00B      RJMP	0x0130
(0269)      for(j=0;j<1141;j++);//1141是在8MHz晶振下，通过软件仿真反复实验得到的数值
    00125 2766      CLR	R22
    00126 2777      CLR	R23
    00127 C002      RJMP	0x012A
    00128 5F6F      SUBI	R22,0xFF
    00129 4F7F      SBCI	R23,0xFF
    0012A 3765      CPI	R22,0x75
    0012B E0E4      LDI	R30,4
    0012C 077E      CPC	R23,R30
    0012D F3D0      BCS	0x0128
    0012E 5F4F      SUBI	R20,0xFF
    0012F 4F5F      SBCI	R21,0xFF
    00130 1740      CP	R20,R16
    00131 0751      CPC	R21,R17
    00132 F390      BCS	0x0125
    00133 C13A      RJMP	pop_xgsetF000
_disp_smg:
  wei                  --> R10
  value                --> R12
    00134 D14C      RCALL	push_xgset303C
    00135 2EA2      MOV	R10,R18
    00136 2EC0      MOV	R12,R16
(0270) }
(0271) 
(0272) /*************************************************************
(0273) 函数名称: 数码管显示函数。
(0274) 功    能: 实现在某位数码管上显示要显示的数值。
(0275) 参    数: value--数码管上要显示的值；wei--在哪一位数码管上显示
(0276) 返 回 值: 无
(0277) /************************************************************/
(0278) void disp_smg(uchar value,uchar wei)
(0279) {
(0280)   PORTB=value;//给数码管赋值
    00137 B8C5      OUT	0x05,R12
(0281)   switch(wei)
    00138 2D4A      MOV	R20,R10
    00139 2755      CLR	R21
    0013A 3041      CPI	R20,1
    0013B E0E0      LDI	R30,0
    0013C 075E      CPC	R21,R30
    0013D F049      BEQ	0x0147
    0013E 3042      CPI	R20,2
    0013F E0E0      LDI	R30,0
    00140 075E      CPC	R21,R30
    00141 F049      BEQ	0x014B
    00142 3043      CPI	R20,3
    00143 E0E0      LDI	R30,0
    00144 075E      CPC	R21,R30
    00145 F049      BEQ	0x014F
    00146 C00B      RJMP	0x0152
(0282)     {
(0283) 	  case 1:SET_WEI1;break;
    00147 B188      IN	R24,0x08
    00148 6D8F      ORI	R24,0xDF
    00149 B988      OUT	0x08,R24
    0014A C007      RJMP	0x0152
(0284) 	  case 2:SET_WEI2;break;
    0014B B188      IN	R24,0x08
    0014C 6E8F      ORI	R24,0xEF
    0014D B988      OUT	0x08,R24
    0014E C003      RJMP	0x0152
(0285) 	  case 3:SET_WEI3;break;
    0014F B188      IN	R24,0x08
    00150 6F8B      ORI	R24,0xFB
    00151 B988      OUT	0x08,R24
(0286) 	  default:break;
(0287) 	}
(0288)   Delay_ms(2);//延时2ms
    00152 E002      LDI	R16,2
    00153 E010      LDI	R17,0
    00154 DFCC      RCALL	_Delay_ms
(0289)   CLR_ALL;//关显示
    00155 B188      IN	R24,0x08
    00156 7C89      ANDI	R24,0xC9
    00157 B988      OUT	0x08,R24
    00158 C12F      RJMP	pop_xgset303C
_hongwai:
  i                    --> R20
  j                    --> R10
  k                    --> R22
    00159 D119      RCALL	push_xgsetF00C
(0290) }
(0291) //*************************************************************************
(0292) // 遥控器解码子程序
(0293) //*************************************************************************
(0294) void hongwai()
(0295) {
(0296)  	 uchar i,j,k = 0;
    0015A 2766      CLR	R22
(0297) 	 for(i = 0;i < 20;i++)
    0015B 2744      CLR	R20
    0015C C007      RJMP	0x0164
(0298) 	 {
(0299)   	   Delayus(500);           //延时500us
    0015D EF04      LDI	R16,0xF4
    0015E E011      LDI	R17,1
    0015F D038      RCALL	_Delayus
(0300)   	   if(RED_R)                //12ms内有高电平，则判断为干扰，退出处理程序
    00160 9B4E      SBIS	0x09,6
    00161 C001      RJMP	0x0163
(0301)   	   {
(0302)         	return;
    00162 C034      RJMP	0x0197
    00163 9543      INC	R20
    00164 3144      CPI	R20,0x14
    00165 F3B8      BCS	0x015D
(0303)   	   }
(0304) 	 }
(0305) 	 
(0306) 	 while(!RED_R);            //等待6ms低电平过去
    00166 9B4E      SBIS	0x09,6
    00167 CFFE      RJMP	0x0166
(0307) 
(0308) 	/* for(i=0;i<10;i++)          //是否连发码
(0309) 	 {
(0310)   	   Delayus(500);
(0311)   	   if(!RED_R)
(0312)    	   {
(0313)          return;
(0314)    	   }
(0315) 	 }
(0316) */
(0317) 	 while(RED_R);               //等待6ms高电平过去
    00168 994E      SBIC	0x09,6
    00169 CFFE      RJMP	0x0168
(0318) 
(0319) 	 for(i=0;i<2;i++)
    0016A 2744      CLR	R20
    0016B C029      RJMP	0x0195
(0320) 	 {
(0321)   	     for(j = 0;j < 8;j++)      //每个字节的数据8位
    0016C 24AA      CLR	R10
    0016D C01A      RJMP	0x0188
(0322)   		 {
(0323)    		   while(!RED_R);           //等待变高电平
    0016E 9B4E      SBIS	0x09,6
    0016F CFFE      RJMP	0x016E
    00170 C008      RJMP	0x0179
(0324)    		   while(RED_R)             //计算高电平时间
(0325)    		    {
(0326)     	     Delayus(100);
    00171 E604      LDI	R16,0x64
    00172 E010      LDI	R17,0
    00173 D024      RCALL	_Delayus
(0327)     		 k++;
    00174 9563      INC	R22
(0328)     		 if(k >130)               //高电平时间过长，则退出处理程序
    00175 E882      LDI	R24,0x82
    00176 1786      CP	R24,R22
    00177 F408      BCC	0x0179
(0329)     		   {
(0330)      		     return;        
    00178 C01E      RJMP	0x0197
    00179 994E      SBIC	0x09,6
    0017A CFF6      RJMP	0x0171
(0331)     		   }
(0332)    
(0333)    		    }
(0334)    		   code_value>>=1;          //接受一位数据
    0017B 9020 02B2 LDS	R2,code_value
    0017D 9426      LSR	R2
    0017E 9220 02B2 STS	code_value,R2
(0335)    		   if(k >= 70)
    00180 3466      CPI	R22,0x46
    00181 F020      BCS	0x0186
(0336)    		    {
(0337)     	     code_value|=0x80;       //高电平时间大于6，则为数据1
    00182 2D82      MOV	R24,R2
    00183 6880      ORI	R24,0x80
    00184 9380 02B2 STS	code_value,R24
(0338)    		    }
(0339)    		   k = 0;                  //计时清零
    00186 2766      CLR	R22
    00187 94A3      INC	R10
    00188 2D8A      MOV	R24,R10
    00189 3088      CPI	R24,0x8
    0018A F318      BCS	0x016E
(0340)   		 }
(0341)   		 key_code[i]=code_value;
    0018B EB84      LDI	R24,0xB4
    0018C E092      LDI	R25,2
    0018D 2FE4      MOV	R30,R20
    0018E 27FF      CLR	R31
    0018F 0FE8      ADD	R30,R24
    00190 1FF9      ADC	R31,R25
    00191 9020 02B2 LDS	R2,code_value
    00193 8220      ST	Z,R2
    00194 9543      INC	R20
    00195 3042      CPI	R20,2
    00196 F2A8      BCS	0x016C
    00197 C0E2      RJMP	pop_xgsetF00C
_Delayus:
  i                    --> R20
  US                   --> R10
    00198 D0C6      RCALL	push_xgset300C
    00199 0158      MOVW	R10,R16
(0342)   	 }
(0343) }
(0344) /*******************************************
(0345) 函数名称: Delayus
(0346) 功    能: 延时指定微秒（8M晶振）
(0347) 参    数: US--延时的微秒数(大约，不是很精确，MS越大越准确)
(0348) 返回值  : 无
(0349) /********************************************/
(0350) void Delayus(uint US)		  
(0351) {
(0352)  uint i;
(0353)  US=US*5/4;		  	 //5/4是在8MHz晶振下，通过软件仿真反复实验得到的数值
    0019A E005      LDI	R16,5
    0019B E010      LDI	R17,0
    0019C 0195      MOVW	R18,R10
    0019D D0B1      RCALL	empy16s
    0019E 0158      MOVW	R10,R16
    0019F 94B6      LSR	R11
    001A0 94A7      ROR	R10
    001A1 94B6      LSR	R11
    001A2 94A7      ROR	R10
(0354)  for( i=0;i<US;i++); 
    001A3 2744      CLR	R20
    001A4 2755      CLR	R21
    001A5 C002      RJMP	0x01A8
    001A6 5F4F      SUBI	R20,0xFF
    001A7 4F5F      SBCI	R21,0xFF
    001A8 154A      CP	R20,R10
    001A9 055B      CPC	R21,R11
    001AA F3D8      BCS	0x01A6
    001AB C0B8      RJMP	pop_xgset300C
(0355) }
(0356) /********************************************
(0357) 函数名称: 主函数
(0358) 功    能: 实现函数主体功能。
(0359) 参    数: 无
(0360) 返 回 值: 无
(0361) ********************************************/
(0362) void main(void)
(0363) { uint dis1,dis2,dis3,i,a1=0,temprature;
_main:
  temprature           --> Y,+1
  a1                   --> R20
  dis3                 --> R10
  dis2                 --> R12
  dis1                 --> R14
  i                    --> R20
    001AC 2744      CLR	R20
    001AD 2755      CLR	R21
(0364)   port_init();//端口初始化
    001AE DF67      RCALL	_port_init
    001AF C064      RJMP	0x0214
(0365)   while(1)
(0366)     {
(0367) 	  hongwai();
    001B0 DFA8      RCALL	_hongwai
(0368) 	  if(key_code[0]==(~key_code[1]))
    001B1 9020 02B5 LDS	R2,key_code+1
    001B3 9420      COM	R2
    001B4 9030 02B4 LDS	R3,key_code
    001B6 1432      CP	R3,R2
    001B7 F009      BEQ	0x01B9
    001B8 C02F      RJMP	0x01E8
(0369) 	 { 
(0370) 	   a1=key_code[0];
    001B9 2D43      MOV	R20,R3
    001BA 2755      CLR	R21
(0371) 	  // temprature=temp_value[a1];
(0372) 	   dis1=temp_value[a1]/100%10;//计算红外用户码的百位数据
    001BB E080      LDI	R24,0
    001BC E091      LDI	R25,1
    001BD 01FA      MOVW	R30,R20
    001BE 0FEE      LSL	R30
    001BF 1FFF      ROL	R31
    001C0 0FE8      ADD	R30,R24
    001C1 1FF9      ADC	R31,R25
    001C2 8100      LD	R16,Z
    001C3 8111      LDD	R17,Z+1
    001C4 E624      LDI	R18,0x64
    001C5 E030      LDI	R19,0
    001C6 D053      RCALL	div16s
    001C7 E02A      LDI	R18,0xA
    001C8 E030      LDI	R19,0
    001C9 D04C      RCALL	mod16s
    001CA 0178      MOVW	R14,R16
(0373)        dis2=temp_value[a1]/10%10;//计算红外用户码的十位数据
    001CB E080      LDI	R24,0
    001CC E091      LDI	R25,1
    001CD 01FA      MOVW	R30,R20
    001CE 0FEE      LSL	R30
    001CF 1FFF      ROL	R31
    001D0 0FE8      ADD	R30,R24
    001D1 1FF9      ADC	R31,R25
    001D2 8100      LD	R16,Z
    001D3 8111      LDD	R17,Z+1
    001D4 E02A      LDI	R18,0xA
    001D5 E030      LDI	R19,0
    001D6 D043      RCALL	div16s
    001D7 E02A      LDI	R18,0xA
    001D8 E030      LDI	R19,0
    001D9 D03C      RCALL	mod16s
    001DA 0168      MOVW	R12,R16
(0374)        dis3=temp_value[a1]%10;}//计算红外用户码的个位数据
    001DB E080      LDI	R24,0
    001DC E091      LDI	R25,1
    001DD 01FA      MOVW	R30,R20
    001DE 0FEE      LSL	R30
    001DF 1FFF      ROL	R31
    001E0 0FE8      ADD	R30,R24
    001E1 1FF9      ADC	R31,R25
    001E2 8100      LD	R16,Z
    001E3 8111      LDD	R17,Z+1
    001E4 E02A      LDI	R18,0xA
    001E5 E030      LDI	R19,0
    001E6 D02F      RCALL	mod16s
    001E7 0158      MOVW	R10,R16
(0375) 	   for( i=0;i<10;i++)
    001E8 2744      CLR	R20
    001E9 2755      CLR	R21
    001EA C025      RJMP	0x0210
(0376) 	   	{
(0377) 		  disp_smg(table[dis1],3);
    001EB E023      LDI	R18,3
    001EC E982      LDI	R24,0x92
    001ED E092      LDI	R25,2
    001EE 01F7      MOVW	R30,R14
    001EF 0FEE      LSL	R30
    001F0 1FFF      ROL	R31
    001F1 0FE8      ADD	R30,R24
    001F2 1FF9      ADC	R31,R25
    001F3 8100      LD	R16,Z
    001F4 8111      LDD	R17,Z+1
    001F5 DF3E      RCALL	_disp_smg
(0378) 		  //  while(RED_R==0)hongwai();
(0379) 	  	  disp_smg(table[dis2]+0x80,2);
    001F6 E022      LDI	R18,2
    001F7 E982      LDI	R24,0x92
    001F8 E092      LDI	R25,2
    001F9 01F6      MOVW	R30,R12
    001FA 0FEE      LSL	R30
    001FB 1FFF      ROL	R31
    001FC 0FE8      ADD	R30,R24
    001FD 1FF9      ADC	R31,R25
    001FE 8100      LD	R16,Z
    001FF 8111      LDD	R17,Z+1
    00200 5800      SUBI	R16,0x80
    00201 4F1F      SBCI	R17,0xFF
    00202 DF31      RCALL	_disp_smg
(0380) 		  //  while(RED_R==0)hongwai(); 
(0381) 	  	  disp_smg(table[dis3],1);
FILE: <library>
    00203 E021      LDI	R18,1
    00204 E982      LDI	R24,0x92
    00205 E092      LDI	R25,2
    00206 01F5      MOVW	R30,R10
    00207 0FEE      LSL	R30
    00208 1FFF      ROL	R31
    00209 0FE8      ADD	R30,R24
    0020A 1FF9      ADC	R31,R25
    0020B 8100      LD	R16,Z
    0020C 8111      LDD	R17,Z+1
    0020D DF26      RCALL	_disp_smg
    0020E 5F4F      SUBI	R20,0xFF
    0020F 4F5F      SBCI	R21,0xFF
    00210 304A      CPI	R20,0xA
    00211 E0E0      LDI	R30,0
    00212 075E      CPC	R21,R30
    00213 F2B8      BCS	0x01EB
    00214 CF9B      RJMP	0x01B0
    00215 9508      RET
mod16s:
    00216 9468      BSET	6
    00217 92DA      ST	-Y,R13
    00218 2ED1      MOV	R13,R17
    00219 C004      RJMP	0x021E
div16s:
    0021A 94E8      BCLR	6
    0021B 92DA      ST	-Y,R13
    0021C 2ED1      MOV	R13,R17
    0021D 26D3      EOR	R13,R19
    0021E FF17      SBRS	R17,7
    0021F C004      RJMP	0x0224
    00220 9510      COM	R17
    00221 9500      COM	R16
    00222 5F0F      SUBI	R16,0xFF
    00223 4F1F      SBCI	R17,0xFF
    00224 FF37      SBRS	R19,7
    00225 C004      RJMP	0x022A
    00226 9530      COM	R19
    00227 9520      COM	R18
    00228 5F2F      SUBI	R18,0xFF
    00229 4F3F      SBCI	R19,0xFF
    0022A D00B      RCALL	xdiv16u
    0022B FED7      SBRS	R13,7
    0022C C004      RJMP	0x0231
    0022D 9510      COM	R17
    0022E 9500      COM	R16
    0022F 5F0F      SUBI	R16,0xFF
    00230 4F1F      SBCI	R17,0xFF
    00231 90D9      LD	R13,Y+
    00232 9508      RET
mod16u:
    00233 9468      BSET	6
    00234 C001      RJMP	xdiv16u
div16u:
    00235 94E8      BCLR	6
xdiv16u:
    00236 92EA      ST	-Y,R14
    00237 92FA      ST	-Y,R15
    00238 938A      ST	-Y,R24
    00239 24EE      CLR	R14
    0023A 24FF      CLR	R15
    0023B E180      LDI	R24,0x10
    0023C 0F00      LSL	R16
    0023D 1F11      ROL	R17
    0023E 1CEE      ROL	R14
    0023F 1CFF      ROL	R15
    00240 16E2      CP	R14,R18
    00241 06F3      CPC	R15,R19
    00242 F018      BCS	0x0246
    00243 1AE2      SUB	R14,R18
    00244 0AF3      SBC	R15,R19
    00245 9503      INC	R16
    00246 958A      DEC	R24
    00247 F7A1      BNE	0x023C
    00248 F416      BRTC	0x024B
    00249 2D0E      MOV	R16,R14
    0024A 2D1F      MOV	R17,R15
    0024B 9189      LD	R24,Y+
    0024C 90F9      LD	R15,Y+
    0024D 90E9      LD	R14,Y+
    0024E 9508      RET
empy16s:
    0024F 920A      ST	-Y,R0
    00250 921A      ST	-Y,R1
    00251 938A      ST	-Y,R24
    00252 939A      ST	-Y,R25
    00253 9F02      MUL	R16,R18
    00254 01C0      MOVW	R24,R0
    00255 9F12      MUL	R17,R18
    00256 0D90      ADD	R25,R0
    00257 9F03      MUL	R16,R19
    00258 0D90      ADD	R25,R0
    00259 018C      MOVW	R16,R24
    0025A 9199      LD	R25,Y+
    0025B 9189      LD	R24,Y+
    0025C 9019      LD	R1,Y+
    0025D 9009      LD	R0,Y+
    0025E 9508      RET
push_xgset300C:
    0025F 935A      ST	-Y,R21
    00260 934A      ST	-Y,R20
    00261 92BA      ST	-Y,R11
    00262 92AA      ST	-Y,R10
    00263 9508      RET
pop_xgset300C:
    00264 90A9      LD	R10,Y+
    00265 90B9      LD	R11,Y+
    00266 9149      LD	R20,Y+
    00267 9159      LD	R21,Y+
    00268 9508      RET
push_xgsetF000:
    00269 937A      ST	-Y,R23
    0026A 936A      ST	-Y,R22
    0026B 935A      ST	-Y,R21
    0026C 934A      ST	-Y,R20
    0026D 9508      RET
pop_xgsetF000:
    0026E 9149      LD	R20,Y+
    0026F 9159      LD	R21,Y+
    00270 9169      LD	R22,Y+
    00271 9179      LD	R23,Y+
    00272 9508      RET
push_xgsetF00C:
    00273 937A      ST	-Y,R23
    00274 936A      ST	-Y,R22
    00275 935A      ST	-Y,R21
    00276 934A      ST	-Y,R20
    00277 92BA      ST	-Y,R11
    00278 92AA      ST	-Y,R10
    00279 9508      RET
pop_xgsetF00C:
    0027A 90A9      LD	R10,Y+
    0027B 90B9      LD	R11,Y+
    0027C 9149      LD	R20,Y+
    0027D 9159      LD	R21,Y+
    0027E 9169      LD	R22,Y+
    0027F 9179      LD	R23,Y+
    00280 9508      RET
push_xgset303C:
    00281 935A      ST	-Y,R21
    00282 934A      ST	-Y,R20
    00283 92DA      ST	-Y,R13
    00284 92CA      ST	-Y,R12
    00285 92BA      ST	-Y,R11
    00286 92AA      ST	-Y,R10
    00287 9508      RET
pop_xgset303C:
    00288 90A9      LD	R10,Y+
    00289 90B9      LD	R11,Y+
    0028A 90C9      LD	R12,Y+
    0028B 90D9      LD	R13,Y+
    0028C 9149      LD	R20,Y+
    0028D 9159      LD	R21,Y+
    0028E 9508      RET
