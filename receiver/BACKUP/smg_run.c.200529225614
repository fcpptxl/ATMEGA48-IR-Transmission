#include <iom48v.h>
#include <macros.h>
temp_value[]={
0	,
2	,
4	,
6	,
8	,
10	,
12	,
14	,
16	,
18	,
20	,
22	,
24	,
26	,
28	,
30	,
32	,
34	,
36	,
38	,
40	,
42	,
44	,
46	,
48	,
50	,
52	,
54	,
56	,
58	,
60	,
62	,
64	,
66	,
68	,
70	,
72	,
74	,
76	,
78	,
80	,
82	,
84	,
86	,
88	,
90	,
92	,
94	,
96	,
98	,
100	,
102	,
104	,
106	,
108	,
110	,
112	,
114	,
116	,
118	,
120	,
122	,
124	,
126	,
128	,
130	,
132	,
134	,
136	,
138	,
140	,
142	,
144	,
146	,
148	,
150	,
152	,
154	,
156	,
158	,
160	,
162	,
164	,
166	,
168	,
170	,
172	,
174	,
176	,
178	,
180	,
182	,
184	,
186	,
188	,
190	,
192	,
194	,
196	,
198	,
200	,
202	,
204	,
206	,
208	,
210	,
212	,
214	,
216	,
218	,
220	,
222	,
224	,
226	,
228	,
230	,
232	,
234	,
236	,
238	,
240	,
242	,
244	,
246	,
248	,
250	,
252	,
254	,
256	,
258	,
260	,
262	,
264	,
266	,
268	,
270	,
272	,
274	,
276	,
278	,
280	,
282	,
284	,
286	,
288	,
290	,
292	,
294	,
296	,
298	,
300	,
302	,
304	,
306	,
308	,
310	,
312	,
314	,
316	,
318	,
320	,
322	,
324	,
326	,
328	,
330	,
332	,
334	,
336	,
338	,
340	,
342	,
344	,
346	,
348	,
350	,
352	,
354	,
356	,
358	,
360	,
362	,
364	,
366	,
368	,
370	,
372	,
374	,
376	,
378	,
380	,
382	,
384	,
386	,
388	,
390	,
392	,
394	,
396	,
398	,
400	
};
/***********宏定义*************/
#define  uchar unsigned char 
#define  uint unsigned int
                 
table[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71};


/***************************************************
宏定义名称：IO端口操作宏定义。
功      能：实现数码管的位选。
***************************************************/
#define SET_WEI1 PORTC|=~BIT(5)   
#define SET_WEI2 PORTC|=~BIT(4)
#define SET_WEI3 PORTC|=~BIT(2)

#define CLR_WEI1 PORTC&=~BIT(5)
#define CLR_WEI2 PORTC&=BIT(4)
#define CLR_WEI3 PORTC&=BIT(2)
#define CLR_ALL  PORTC&=0XC9
/*#define SET_WEI1 PORTC&=~BIT(1)   
#define SET_WEI2 PORTC&=~BIT(2)
#define SET_WEI3 PORTC&=~BIT(4)
#define SET_WEI4 PORTC&=~BIT(5)

#define CLR_WEI1 PORTC|=~BIT(1)
#define CLR_WEI2 PORTC|=BIT(2)
#define CLR_WEI3 PORTC|=BIT(4)
#define CLR_WEI4 PORTC|=BIT(5)
#define CLR_ALL  PORTC|=0X34*/
unsigned char  falg1;
uchar code_value=0;
uchar key_code[4],code='_';
//******************红外引脚************************************                          
#define hongwai_bit   PD6
#define hongwai_in    DDRD&=~BIT(hongwai_bit)
#define RED_R  (PIND & BIT(hongwai_bit))
/*******************************************
函数名称: IO口初始化程序
功    能: 实现IO初始化
参    数: 无
返 回 值: 无
/********************************************/
void port_init(void)
{
 PORTC = 0x00;
 DDRC  = 0x3F;
 PORTB = 0xFF;
 DDRB  = 0xFF;
 DDRD=0xFF;
 hongwai_in;//设置PD2（INT0）为输入
 PORTD&=~BIT(hongwai_bit);//带上拉电阻
}

/*******************************************
函数名称: 软件延时函数
功    能: 实现软件延时
参    数: ms--延时的毫秒数
返 回 值: 无
/********************************************/
void Delay_ms(uint ms)
{
   unsigned int i,j;
   for(i=0;i<ms;i++)
     for(j=0;j<1141;j++);//1141是在8MHz晶振下，通过软件仿真反复实验得到的数值
}

/*************************************************************
函数名称: 数码管显示函数。
功    能: 实现在某位数码管上显示要显示的数值。
参    数: value--数码管上要显示的值；wei--在哪一位数码管上显示
返 回 值: 无
/************************************************************/
void disp_smg(uchar value,uchar wei)
{
  PORTB=value;//给数码管赋值
  switch(wei)
    {
	  case 1:SET_WEI1;break;
	  case 2:SET_WEI2;break;
	  case 3:SET_WEI3;break;
	  default:break;
	}
  Delay_ms(2);//延时2ms
  CLR_ALL;//关显示
}
//*************************************************************************
// 遥控器解码子程序
//*************************************************************************
void hongwai()
{
 	 uchar i,j,k = 0;
	 for(i = 0;i < 20;i++)
	 {
  	   Delayus(500);           //延时500us
  	   if(RED_R)                //12ms内有高电平，则判断为干扰，退出处理程序
  	   {
        	return;
  	   }
	 }
	 
	 while(!RED_R);            //等待6ms低电平过去

	 for(i=0;i<10;i++)          //是否连发码
	 {
  	   Delayus(500);
  	   if(!RED_R)
   	   {
         return;
   	   }
	 }

	 while(RED_R);               //等待6ms高电平过去

	 for(i=0;i<2;i++)
	 {
  	     for(j = 0;j < 8;j++)      //每个字节的数据8位
  		 {
   		   while(!RED_R);           //等待变高电平
   		   while(RED_R)             //计算高电平时间
   		    {
    	     Delayus(100);
    		 k++;
    		 if(k >130)               //高电平时间过长，则退出处理程序
    		   {
     		     return;        
    		   }
   
   		    }
   		   code_value>>=1;          //接受一位数据
   		   if(k >= 70)
   		    {
    	     code_value|=0x80;       //高电平时间大于6，则为数据1
   		    }
   		   k = 0;                  //计时清零
  		 }
  		 key_code[i]=code_value;
  	 }
}
/*******************************************
函数名称: Delayus
功    能: 延时指定微秒（8M晶振）
参    数: US--延时的微秒数(大约，不是很精确，MS越大越准确)
返回值  : 无
/********************************************/
void Delayus(uint US)		  
{
 uint i;
 US=US*5/4;		  	 //5/4是在8MHz晶振下，通过软件仿真反复实验得到的数值
 for( i=0;i<US;i++); 
}
/********************************************
函数名称: 主函数
功    能: 实现函数主体功能。
参    数: 无
返 回 值: 无
********************************************/
void main(void)
{ uint dis1,dis2,dis3,i,a1,temprature;
  port_init();//端口初始化
  while(1)
    {
	  hongwai();
	  if(key_code[0]==(~key_code[1]))
	 { 
	   a1=key_code[0];
	   temprature=temp_value[a1];
	   dis1=temprature/100%10;//计算红外用户码的百位数据
       dis2=temprature/10%10;//计算红外用户码的十位数据
       dis3=temprature%10;}//计算红外用户码的个位数据
	   for( i=0;i<10;i++)
	   	{
		  disp_smg(table[dis1],1);
		  //  while(RED_R==0)hongwai();
	  	  disp_smg(table[dis2]+0x80,2);
		  //  while(RED_R==0)hongwai(); 
	  	  disp_smg(table[dis3],3);
	    }
	 }
  
	
}